******************
* TIPS GENERALES *
******************

- Con el comando "ulimit -a" podemos ver los limites del sistema para el usuario que esta en uso (muy util para ver el maximo
de "fd" por ejemplo).

- Funcion para encontrar leaks de memoria:
        
        void leaks()
        {
            system("leaks -q");
        }

        atexit(leaks);

- Comando para compilar el programa con los flags de 42, un valor a la valiable predeterminado, y ejecutarlo automaticamente
con un nombre persolalizado:

        gcc -Wall -Werror -Wextra -D BUFFER_SIZE=42 get_next_line_bonus.c get_next_line_utils_bonus.c -o test | ./test

- Con el comando "neofetch" vemos las caracteristicas del equipo.

- Con este comando reiniciamos todo el servicio de red del ordenador, en caso de problemas:

        sudo systemctl reenable NetworkManager | sudo systemctl restart NetworkManager

- Y con este comando, que no se como funciona ni que modifica, correguimos de forma permanente el problema
de la señal debil WiFi de las tarjetas Realtek RTL8723BE (en mi Lenovo B5400 funcionó):
 
        echo "options rtl8723be fwlps=0" | sudo tee /etc/modprobe.d/rtl8723be.conf

- Para los que tengan problemas con claves a la hora de hacer "sudo apt update". En mi caso el warning era de los "deadsnakes" (pyhton???):

        W: http://ppa.launchpad.net/deadsnakes/ppa/ubuntu/dists/jammy/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.

Y para solucionarlo cambie el registro de claves de nombre para que a la hora de hacer un update de nuevo no lo reconociese y lo descargase autamaticamente de nuevo, sin errores.

        sudo apt-key list (muestra las claves, cogemos lso 8 ultimos digitos del pub del que falla, que pone desconocido)
        sudo apt-key export 6A755776 | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/deadsnakes.gpg

Ahora hacemos update de nuevo y solucionado.        

*******
* C++ *
*******

- Para seguir la norma de la "forma canonica ortodoxa" en C++ hay que declarar lo siguiente obligatoriamente:

	<Example>();				// constructor por defecto.
	~Example();				// destructor.
	Example(const Example &copy_);		// constructor de copia.
	Example	&operator=(const Fixed &copy_);	// sobrecarga del operador de copia.
	
	Example::Example(): _name("Example"), _grade(150)
	{
		std::cout << "[ Default constructor called! ]" << std::endl;
	}

	Example::~Example()
	{
		std::cout << "[ Destructor called! ]" << std::endl;
	}

	Example::Example(const Example &copy_)
	{
		std::cout << "[ Copy constructor called! ]" << std::endl;
		*this = copy_;
	}

	Example &Example::operator=(const Example &copy_)
	{
		if (this != &copy_)
		{
			std::cout << "[ Coping... ]" << std::endl;
			_grade = copy_._grade;
			return (*this);
		}
		else
		{
			std::cout << "[ Same info. Copy abort! ]" << std::endl;
			return (*this);
		}
	}

	const std::string	&Example::getName(void)
	{
		return (this->_name);
	}

	unsigned int	&Example::getGrade(void)
	{
		return (this->_grade);
	}

- Forma para declarar y usar Getters y Setters:

	const std::string	&getSomething(void);
	void			setSomething(std::string something_);

	const std::string	&Example::getSomething(void)
	{
		return (this->_something);
	}

	void			Example::setSomething(std::string something_)
	{
		this->_something = something_;
	}

*************************
* EDITOR DE TEXTO "VIM" *
*************************

:w (guardar)
:q (salir)
:syntax on (colores)
:set number (numero de linea)
yy (copiar)
pp (pegar)

***********
* GRADEME *
***********

Si no esta instalado G++:

        sudo apt install build-essential

Y luego:

        bash -c "$(curl https://grademe.fr)"

Cheatmenu:

        remove_grade_time
        force_success
        new_ex

**************
* NORMINETTE *
**************

    sudo apt update
    sudo apt install wget software-properties-common 
    sudo add-apt-repository ppa:deadsnakes/ppa 
    sudo apt update 
    sudo apt install python3.9
    wget https://bootstrap.pypa.io/get-pip.py
    python3 ./get-pip.py     
    python3 -m pip install --upgrade pip setuptools
    python3 -m pip install norminette
    git clone https://github.com/42Paris/norminette.git ~/.norminette/

********
* PACO *
********

	(en la carpeta home):
    git clone git@vogsphere.42malaga.com:vogsphere/intra-uuid-451c1d93-d829-47c6-97de-5865d9e91a59-4680803-jmartos-
    sudo apt install g++-12
    sudo apt install clang-12
    sudo apt install clang
    sudo apt reinstall python3

Alias para Frank y Norm:
    nano ~/.bashrc
        alias norminette=~/.norminette/norminette.rb
        alias norma=~/.norminette/norminette.rb
        alias francinette=/home/kevlar/francinette/tester.sh
        alias paco=/home/kevlar/francinette/tester.sh
    source ~/.bashrc

*********
* SLACK *
*********

    Nos descargamos el archivo .deb de la web oficial y usamos el comando siguiente en la carpeta donde este:
        sudo dpkg -i archivodeinstalacion.deb
    Y ingresamos con nuestro email de 42 (que esta redirigido al nuestro de Gmail):
        jmartos-@student.42malaga.com

**********
* GITHUB *
**********

rama MAIN ó MASTER
	(trabajas paralelamente en una copia local y no en el servidor)

(TODO COMIENZA PONIENDO "git")

sudo apt-get intall git
	(instalat git)

git --version
	(saber que version de git esta intalada)

git init
	(comienza el repositorio en directorio en el que estamos)

git status
	(informacion del repositorio)

git config --global user.name "kevlaroscuro"
	(le decimos a git nuestro nombre, para el registro de usuario a
	ojos de cambios y modificaciones en el trabajo de repositorios)

git config --global user.email "kevlaroscuro@gmail.com"
	(lo mismo, pero ponemos nuestro email)

git config --list
	(muestra la configuradion de Git)

git add 
	(hacer seguimiento de un archivo)

git commit
	(confirma los cambios y los sube al servidor)

git commit -m ""
	(confirmar cambios con la anotacion ya incluida)

git commit --amend
	(se abre un editor nano para cambiar el mensaje
	de confirmacion	del commit)

git restore --stage ""
	(saca un archivo del seguimiento)

git reset --hard HEAD^
	(borrado forzoso del ultimo commit, la ultima confirmacion)

git reset --hard HEAD~3
	(borrado forzoso de commit tercero)

git log
	(muestra el historial)

git pull
	(descargas los cambios de GitHub 
	a tu repositorio local, Y SE SOBREESCRIBE!)

git push
	(sube los cambios del local a la nube en GitHub)

git push -f origin main
	(sube los cambios de forma forzada a la rama main)
	
git remote add origin "URL.git"
	(vinculamos el repositorio local en la nube)	

git push --set-upstream origin master
	(para configurar la rama master en main y el remoto como upstream
	y tenerlo ya configurado automaticamente)

git remote -v
	(para saber si tenemos un repositorio vinculado en la nube)

git remote set-url "nombre del repo local" "URL.git"
	(para cambiar el repo si nos hemos equivocado)

git clone "URL"
	(clona el repositorio con la URL en nuestro
	directorio local)

(OJO! No es lo mismo "clonar" que "forkear". Para forkear lo haces
en GitHub del destino a tu cuenta y luego ya clonas desde tu cuenta
a local. Se usa para clonar repositorios publicos sin tener
permisos)

git remote add upstream "URL"
	(despues de forkear, vincula el repositorio original con
	el tuyo de GitHub)

git fetch upstream
	(similar al pull, ya que se descargan los cambios del 
	repositorio original al tuyo de GitHub)

git branch
	(muestra las ramas del repositorio)

git branch ""
	(crea una nueva rama)

git branch -d ""
	(borra una rama)

git checkout ""
	(cambia de rama)

git checkout -b ""
	(crea una nueva rama y te translada a ella)

git merge upstream/main
	(fusiona dos ramas)

git diff origin main
	(compara los ficheros entre ramas)
	
git gc --aggressive --prune=all
	(?¿)
